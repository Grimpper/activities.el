#+TITLE: activity.el

Inspired by Genera's and KDE's concepts of "activities", this library allows the user to select an "activity", the loading of which restores a window configuration and/or frameset, along with the buffers shown in each window.  Saving an activity saves the state for later restoration.  Switching away from an activity saves the last-used state for later switching back to, while still allowing the activity's initial or default state to be restored on demand.  Restoring an activity loads the last-used state, or the initial/default state when a universal argument is provided.

The implementation uses the bookmark system to save buffers' states--that is, any major mode that supports the bookmark system is compatible.  A buffer whose major mode does not support the bookmark system (or does not support it well enough to restore useful state) is not compatible and can't be fully restored, or perhaps not at all; but solving that is as simple as implementing bookmark support for the mode, which is usually trivial.

Integration with Emacs's ~tab-bar-mode~ is provided: a window configuration or frameset can be restored to a window or set of frames, or to a tab or set of tabs.

Various hooks are provided, both globally and per-activity, so that the user can define functions to be called when an activity is saved, restored, or switched from/to.  For example, this could be used to limit the set of buffers offered for switching to within an activity, or to track the time spent in an activity.

* Installation

Until this library is available from a package archive, it's recommended to install it using [[https://framagit.org/steckerhalter/quelpa][Quelpa]]:

1.  Install [[https://framagit.org/steckerhalter/quelpa-use-package#installation][quelpa-use-package]] (which can be installed directly from MELPA).
2.  Add this form to your init file (which includes a recommended configuration):

#+BEGIN_SRC elisp
  (use-package activity
    :quelpa (activity :fetcher github :repo "alphapapa/activity.el")

    :config
    ;; Automatically save activities' states when Emacs is idle and upon
    ;; exit.
    (activity-mode)
    ;; Open activities in `tab-bar' tabs (otherwise frames are used, but
    ;; the author doesn't test that as much).
    (activity-tabs-mode))
#+END_SRC

If you choose to install it otherwise, you'll need to load both the ~activity~ and ~activity-tabs~ libraries, or ensure that the autoloads are generated properly.

* Usage

** Workflow

1. Arrange windows in a tab according to an activity you're performing.
2. Call ~activity-save~ to save the activity under a name.
3. Perform the activity for a while.
4. Change window configuration, change tab, close the tab, or even restart Emacs.
5. Call ~activity-resume~ to resume the activity where you left off.
6. Return to the original activity state with ~activity-reset~ (or ~C-u M-x activity-resume RET~).
7. Suspend the activity with ~activity-suspend~ (which saves its last state and closes its frame/tab).

* FAQ

+ How is this different from [[https://github.com/alphapapa/burly.el][Burly.el]] or [[https://github.com/alphapapa/bufler.el/][Bufler.el]]? :: Burly is a well-polished tool for restoring window and frame configurations, which could be considered an incubator for some of the ideas furthered here.  Bufler's ~bufler-workspace~ library uses Burly to provide some similar functionality, which is at an exploratory stage.  ~activity~ hopes to provide a longer-term solution more suitable for integration into Emacs.

+ How does this differ from "workspace" packages? :: Yes, there are many Emacs packages that provide "workspace"-like features in one way or another.  To date, only Burly and Bufler seem to offer the ability to restore one across Emacs sessions.  As mentioned, ~activity~ is intended to be more refined and easier to use (e.g. automatically saving activities' states when ~activity-mode~ is enabled).  Comparisons to other packages are left to the reader; suffice to say that ~activity~ is intended to provide what other tools haven't, in an idiomatic, intuitive way.  (Feedback is welcome.)

+ How does this differ from the built-in ~desktop-mode~? :: As best this author can tell, ~desktop-mode~ saves and restores one set of buffers, with various options to control its behavior.  It does not use ~bookmark~ internally, which prevents it from restoring non-file-backed buffers.  As well, it is not intended to be used on-demand to switch between sets of buffers, windows, or frames (i.e. "activities").

+ "Activities" haven't seemed to pan out for KDE.  Why would they in Emacs? :: KDE Plasma's Activities system requires applications that can save and restore their state through Plasma, which only (or mostly only?) KDE apps can do, limiting the usefulness of the system.  However, Emacs offers a coherent environment, similar to Lisp machines of yore, and its ~bookmark~ library offers a way for any buffer's major mode to save and restore state, if implemented (which many already are).

+ Why did I get an error? :: Because ~activity~ is at an early stage of development and some of these features are not simple to implement.  But it's based on Burly, which has already been through much bug-fixing, so it should proceed smoothly.  Please report any bugs you find.
